import type { Parameters } from '$lib/docs';
import { capitalizeFirstLetter } from '$lib/utils';

export const pythonCodeExample = (
	parsedParams: Parameters,
	processMultipleLocations: boolean,
	numberOfLocations: number | string,
	numberOfModels: number,
	server: string,
	int64Variables: string[],
	sdk_type: string
) => {
	const p = processMultipleLocations;
	const daily = parsedParams.daily;
	const hourly = parsedParams.hourly;
	const models = parsedParams.models;
	const current = parsedParams.current;
	const latitude = parsedParams.latitude;
	const longitude = parsedParams.longitude;

	let c = `<pre class="shiki css-variables" style="background-color:var(--code-preview-background);color:var(--code-preview-foreground)" tabindex="0"><code><span class="line"><span style="color:var(--code-preview-token-keyword);font-style:italic">import</span><span style="color:var(--code-preview-foreground)"> openmeteo_requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--code-preview-token-keyword);font-style:italic">import</span><span style="color:var(--code-preview-foreground)"> pandas </span><span style="color:var(--code-preview-token-keyword);font-style:italic">as</span><span style="color:var(--code-preview-foreground)"> pd</span></span>
<span class="line"><span style="color:var(--code-preview-token-keyword);font-style:italic">import</span><span style="color:var(--code-preview-foreground)"> requests_cache</span></span>
<span class="line"><span style="color:var(--code-preview-token-keyword);font-style:italic">from</span><span style="color:var(--code-preview-foreground)"> retry_requests </span><span style="color:var(--code-preview-token-keyword);font-style:italic">import</span><span style="color:var(--code-preview-foreground)"> retry</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--code-preview-token-comment);font-style:italic"># Setup the Open-Meteo API client with cache and retry on error</span></span>
<span class="line"><span style="color:var(--code-preview-foreground)">cache_session </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> requests_cache</span><span style="color:var(--code-preview-token-punctuation-mark)">.</span><span style="color:var(--code-preview-token-function)">CachedSession</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-string-expression)"><span style="color:var(--code-preview-token-punctuation-mark)">'</span>.cache<span style="color:var(--code-preview-token-punctuation-mark)">'</span></span><span style="color:var(--code-preview-token-punctuation-mark)">, </span><span style="font-style:italic">expire_after</span> </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-constant)"> 3600</span><span style="color:var(--code-preview-token-bracket)">)</span></span>
<span class="line"><span style="color:var(--code-preview-foreground)">retry_session </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-function)"> retry</span><span style="color:var(--code-preview-token-bracket)">(<span style="color:var(--code-preview-token-function)">cache_session</span>, </span><span style="font-style:italic">retries </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-constant)"> 5</span><span style="font-style:italic">, backoff_factor </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-constant)"> 0.2</span><span style="color:var(--code-preview-token-bracket)">)</span></span>
<span class="line"><span style="color:var(--code-preview-foreground)">openmeteo </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> openmeteo_requests</span><span style="color:var(--code-preview-token-punctuation-mark)">.</span><span style="color:var(--code-preview-token-function)">Client</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="font-style:italic">session</span> </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-punctuation)"> retry_session<span style="color:var(--code-preview-token-bracket)">)</span></span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--code-preview-token-comment);font-style:italic"># Make sure all required weather variables are listed here</span></span>
<span class="line"><span style="color:var(--code-preview-token-comment);font-style:italic"># The order of variables in hourly or daily is important to assign them correctly below</span></span>
<span class="line"><span style="color:var(--code-preview-foreground)">url </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-string-expression)"><span style="color:var(--code-preview-token-punctuation-mark)"> "</span>${server}<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span>
<span class="line"><span style="color:var(--code-preview-foreground)">params </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-punctuation-mark)"> {</span></span>`;
	if (latitude && longitude) {
		c += `
<span class="line"><span style="color:var(--code-preview-token-string-expression)">	<span style="color:var(--code-preview-token-punctuation-mark)">"</span>latitude<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-punctuation-mark)">:</span><span style="color:var(--code-preview-token-constant)"> ${latitude.constructor === Array ? '<span style="color:var(--code-preview-token-bracket)">[</span>' + latitude.join('<span style="color:var(--code-preview-token-punctuation-mark)">, </span>') + '<span style="color:var(--code-preview-token-bracket)">]</span>' : latitude}</span><span style="color:var(--code-preview-token-punctuation-mark)">,</span></span>
<span class="line"><span style="color:var(--code-preview-token-string-expression)">	<span style="color:var(--code-preview-token-punctuation-mark)">"</span>longitude<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-punctuation-mark)">:</span><span style="color:var(--code-preview-token-constant)"> ${longitude.constructor === Array ? '<span style="color:var(--code-preview-token-bracket)">[</span>' + longitude.join('<span style="color:var(--code-preview-token-punctuation-mark)">, </span>') + '<span style="color:var(--code-preview-token-bracket)">]</span>' : longitude}</span><span style="color:var(--code-preview-token-punctuation-mark)">,</span></span>`;
	}
	if (daily) {
		c += `
<span class="line"><span style="color:var(--code-preview-token-string-expression)">	<span style="color:var(--code-preview-token-punctuation-mark)">"</span>daily<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-punctuation-mark)">:</span> ${daily.constructor === Array ? '<span style="color:var(--code-preview-token-bracket)">[<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-string-expression)">' + daily.join('</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-punctuation-mark)">, <span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-string-expression)">') + '</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-bracket)">]</span>' : '<span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">' + daily + '</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span>'}<span style="color:var(--code-preview-token-punctuation-mark)">,</span>`;
	}
	if (hourly) {
		c += `
<span class="line"><span style="color:var(--code-preview-token-string-expression)">	<span style="color:var(--code-preview-token-punctuation-mark)">"</span>hourly<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-punctuation-mark)">:</span> ${hourly.constructor === Array ? '<span style="color:var(--code-preview-token-bracket)">[<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-string-expression)">' + hourly.join('</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-punctuation-mark)">, <span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-string-expression)">') + '</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-bracket)">]</span>' : '<span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">' + hourly + '</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span>'}<span style="color:var(--code-preview-token-punctuation-mark)">,</span>`;
	}
	if (models) {
		c += `
<span class="line"><span style="color:var(--code-preview-token-string-expression)">	<span style="color:var(--code-preview-token-punctuation-mark)">"</span>models<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-punctuation-mark)">:</span> ${models.constructor === Array ? '<span style="color:var(--code-preview-token-bracket)">[<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-string-expression)">' + models.join('</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-punctuation-mark)">, <span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-string-expression)">') + '</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-bracket)">]</span>' : '<span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">' + models + '</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span>'}<span style="color:var(--code-preview-token-punctuation-mark)">,</span>`;
	}
	if (current) {
		c += `
<span class="line"><span style="color:var(--code-preview-token-string-expression)">	<span style="color:var(--code-preview-token-punctuation-mark)">"</span>current<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-punctuation-mark)">:</span> ${current.constructor === Array ? '<span style="color:var(--code-preview-token-bracket)">[<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-string-expression)">' + current.join('</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-punctuation-mark)">, <span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-string-expression)">') + '</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-bracket)">]</span>' : '<span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">' + current + '</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span>'}<span style="color:var(--code-preview-token-punctuation-mark)">,</span>`;
	}
	c += `
<span class="line"><span style="color:var(--code-preview-token-punctuation-mark)">}</span></span>
<span class="line"><span style="color:var(--code-preview-foreground)">responses </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> openmeteo</span><span style="color:var(--code-preview-token-punctuation-mark)">.</span><span style="color:var(--code-preview-token-function)">weather_api</span><span style="color:var(--code-preview-token-bracket)">(<span style="color:var(--code-preview-token-function)">url</span>, <span style="color:var(--code-preview-foreground);font-style:italic">params</span></span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-punctuation)">params<span style="color:var(--code-preview-token-bracket)">)</span></span></span>
<span class="line"></span>`;
	if (processMultipleLocations) {
		c +=
			`
<span class="line"><span style="color:var(--code-preview-token-comment);font-style:italic"># Process ` +
			(numberOfLocations ? `${numberOfLocations} locations` : '1 location') +
			(numberOfModels ? ` and ${numberOfModels} models` : '') +
			`</span></span>
<span class="line"><span style="color:var(--code-preview-token-keyword);font-style:italic">for </span><span style="color:var(--code-preview-foreground)">response </span><span style="color:var(--code-preview-token-keyword);font-style:italic">in</span><span style="color:var(--code-preview-foreground)"> responses</span><span style="color:var(--code-preview-token-punctuation-mark)">:</span></span>`;
	} else {
		c += `
<span class="line"><span style="color:var(--code-preview-token-comment);font-style:italic"># Process first location. Add a for-loop for multiple locations or weather models</span></span>
<span class="line"><span style="color:var(--code-preview-foreground)">response </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> responses</span><span style="color:var(--code-preview-token-punctuation-mark)">[</span><span style="color:var(--code-preview-token-constant)">0</span><span style="color:var(--code-preview-token-punctuation-mark)">]</span></span>`;
	}

	c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-function)">print</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-accent)">f</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">${p ? '\\n' : ''}Coordinates </span><span style="color:var(--code-preview-token-constant)">{</span><span style="color:var(--code-preview-token-punctuation)">response.</span><span style="color:var(--code-preview-token-function)">Latitude</span><span style="color:var(--code-preview-token-bracket)">()</span><span style="color:var(--code-preview-token-constant)">}</span><span style="color:var(--code-preview-token-string-expression)">°N </span><span style="color:var(--code-preview-token-constant)">{</span><span style="color:var(--code-preview-token-punctuation)">response.</span><span style="color:var(--code-preview-token-function)">Longitude</span><span style="color:var(--code-preview-token-bracket)">()</span><span style="color:var(--code-preview-token-constant)">}</span><span style="color:var(--code-preview-token-string-expression)">°E<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-bracket)">)</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-function)">print</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-accent)">f</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">Elevation </span><span style="color:var(--code-preview-token-constant)">{</span><span style="color:var(--code-preview-token-punctuation)">response.</span><span style="color:var(--code-preview-token-function)">Elevation</span><span style="color:var(--code-preview-token-bracket)">()</span><span style="color:var(--code-preview-token-constant)">}</span><span style="color:var(--code-preview-token-string-expression)"> m asl<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-bracket)">)</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-function)">print</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-accent)">f</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">Timezone </span><span style="color:var(--code-preview-token-constant)">{</span><span style="color:var(--code-preview-token-punctuation)">response.</span><span style="color:var(--code-preview-token-function)">Timezone</span><span style="color:var(--code-preview-token-bracket)">()</span><span style="color:var(--code-preview-token-constant)">}{</span><span style="color:var(--code-preview-token-punctuation)">response.</span><span style="color:var(--code-preview-token-function)">TimezoneAbbreviation</span><span style="color:var(--code-preview-token-bracket)">()</span><span style="color:var(--code-preview-token-constant)">}</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)"></span><span style="color:var(--code-preview-token-bracket)">)</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-function)">print</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-accent)">f</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">Timezone difference to GMT+0 </span><span style="color:var(--code-preview-token-constant)">{</span><span style="color:var(--code-preview-token-punctuation)">response.</span><span style="color:var(--code-preview-token-function)">UtcOffsetSeconds</span><span style="color:var(--code-preview-token-bracket)">()</span><span style="color:var(--code-preview-token-constant)">}</span><span style="color:var(--code-preview-token-string-expression)">s<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-bracket)">)</span></span>`;
	if (numberOfModels) {
		c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-function)">print</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-accent)">f</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">Model Nº </span><span style="color:var(--code-preview-token-constant)">{</span><span style="color:var(--code-preview-token-punctuation)">response.</span><span style="color:var(--code-preview-token-function)">Model</span><span style="color:var(--code-preview-token-bracket)">()</span><span style="color:var(--code-preview-token-constant)">}</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-bracket)">)</span></span>`;
	}

	if (current) {
		c += `
${p ? '\t' : ''}<span class="line"></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-comment);font-style:italic"># Current values. The order of variables needs to be the same as requested.</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">current </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> response</span><span style="color:var(--code-preview-token-punctuation-mark)">.</span><span style="color:var(--code-preview-token-function)">Current</span><span style="color:var(--code-preview-token-bracket)">()</span></span>`;
		if (current.constructor === Array) {
			for (const [ind, cur] of current.entries()) {
				c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">current_${cur} </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> current</span><span style="color:var(--code-preview-token-punctuation-mark)">.</span><span style="color:var(--code-preview-token-function)">Variables</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-constant)">${ind}</span><span style="color:var(--code-preview-token-bracket)">).</span><span style="color:var(--code-preview-token-function)">Value</span><span style="color:var(--code-preview-token-bracket)">()</span></span>`;
			}
		} else {
			c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">current_${current} </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> current</span><span style="color:var(--code-preview-token-punctuation-mark)">.</span><span style="color:var(--code-preview-token-function)">Variables</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-constant)">0</span><span style="color:var(--code-preview-token-bracket)">).</span><span style="color:var(--code-preview-token-function)">Value</span><span style="color:var(--code-preview-token-bracket)">()</span></span>`;
		}
		c += `
${p ? '\t' : ''}<span class="line"></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-function)">print</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-accent)">f</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">\\nCurrent time </span><span style="color:var(--code-preview-token-constant)">{</span><span style="color:var(--code-preview-token-punctuation)">current.</span><span style="color:var(--code-preview-token-function)">Time</span><span style="color:var(--code-preview-token-bracket)">()</span><span style="color:var(--code-preview-token-constant)">}</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)"></span><span style="color:var(--code-preview-token-bracket)">)</span></span>`;
		if (current.constructor === Array) {
			for (const cur of current) {
				c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-function)">print</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-accent)">f</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">Current ${cur} </span><span style="color:var(--code-preview-token-constant)">{</span><span style="color:var(--code-preview-token-punctuation)">current_${cur}</span><span style="color:var(--code-preview-token-constant)">}</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)"></span><span style="color:var(--code-preview-token-bracket)">)</span></span>`;
			}
		} else {
			c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-function)">print</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-accent)">f</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">Current ${current} </span><span style="color:var(--code-preview-token-constant)">{</span><span style="color:var(--code-preview-token-punctuation)">current_${current}</span><span style="color:var(--code-preview-token-constant)">}</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)"></span><span style="color:var(--code-preview-token-bracket)">)</span></span>`;
		}
	}

	for (const section of ['hourly', 'daily']) {
		const sect = parsedParams[section] as Parameters['hourly'] | Parameters['daily'] | string;
		if (sect) {
			c += `
${p ? '\t' : ''}<span class="line"></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-comment);font-style:italic"># Process ${section} data. The order of variables needs to be the same as requested.</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">${section} </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> response</span><span style="color:var(--code-preview-token-punctuation-mark)">.</span><span style="color:var(--code-preview-token-function)">${capitalizeFirstLetter(section)}</span><span style="color:var(--code-preview-token-bracket)">()</span></span>`;
			if (sdk_type == 'ensemble_api') {
			} else {
				if (sect.constructor === Array) {
					for (const [ind, variable] of sect.entries()) {
						c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">${section}_${variable} </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> ${section}</span><span style="color:var(--code-preview-token-punctuation-mark)">.</span><span style="color:var(--code-preview-token-function)">Variables</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-constant)">${ind}</span><span style="color:var(--code-preview-token-bracket)">).</span><span style="color:var(--code-preview-token-function)">${int64Variables.includes(variable) ? 'ValuesInt64AsNumpy' : 'ValuesAsNumpy'}</span><span style="color:var(--code-preview-token-bracket)">()</span></span>`;
					}
				} else if (typeof sect === 'string') {
					c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">${section}_${sect} </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> ${section}</span><span style="color:var(--code-preview-token-punctuation-mark)">.</span><span style="color:var(--code-preview-token-function)">Variables</span><span style="color:var(--code-preview-token-bracket)">(</span><span style="color:var(--code-preview-token-constant)">0</span><span style="color:var(--code-preview-token-bracket)">).</span><span style="color:var(--code-preview-token-function)">${int64Variables.includes(sect) ? 'ValuesInt64AsNumpy' : 'ValuesAsNumpy'}</span><span style="color:var(--code-preview-token-bracket)">()</span></span>`;
				}
			}
			c += `
${p ? '\t' : ''}<span class="line"></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">${section}_data </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-punctuation-mark)"> {</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">date<span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-punctuation-mark)">:</span><span style="color:var(--code-preview-foreground)"> pd</span><span style="color:var(--code-preview-token-punctuation-mark)">.</span><span style="color:var(--code-preview-token-function)">date_range</span><span style="color:var(--code-preview-token-bracket)">(</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground);font-style:italic">	start </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-punctuation)"> pd.</span><span style="color:var(--code-preview-token-function)">to_datetime</span><span style="color:var(--code-preview-token-bracket)">(<span style="color:var(--code-preview-token-function)">${section}</span>.</span><span style="color:var(--code-preview-token-function)">Time</span><span style="color:var(--code-preview-token-bracket)">(), <span style="color:var(--code-preview-foreground);font-style:italic">unit</span> </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-punctuation-mark)"> "</span><span style="color:var(--code-preview-token-string-expression)">s</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-punctuation-mark)">, <span style="color:var(--code-preview-foreground);font-style:italic">utc</span> </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-constant)"> True</span><span style="color:var(--code-preview-token-bracket)">),</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground);font-style:italic">	end </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-punctuation)"> pd.</span><span style="color:var(--code-preview-token-function)">to_datetime</span><span style="color:var(--code-preview-token-bracket)">(<span style="color:var(--code-preview-token-function)">${section}</span>.</span><span style="color:var(--code-preview-token-function)">TimeEnd</span><span style="color:var(--code-preview-token-bracket)">(), <span style="color:var(--code-preview-foreground);font-style:italic">unit</span> </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-punctuation-mark)"> "</span><span style="color:var(--code-preview-token-string-expression)">s</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span></span><span style="color:var(--code-preview-token-punctuation-mark)">, <span style="color:var(--code-preview-foreground);font-style:italic">utc</span> </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-constant)"> True</span><span style="color:var(--code-preview-token-bracket)">),</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground);font-style:italic">	freq </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-punctuation)"> pd.</span><span style="color:var(--code-preview-token-function)">Timedelta</span><span style="color:var(--code-preview-token-bracket)">(<span style="color:var(--code-preview-foreground);font-style:italic">seconds</span> </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-punctuation)"> ${section}.</span><span style="color:var(--code-preview-token-function)">Interval</span><span style="color:var(--code-preview-token-bracket)">()),</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground);font-style:italic">	inclusive </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-punctuation-mark)"> "</span><span style="color:var(--code-preview-token-string-expression)">left</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span></span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-bracket)">)}</span></span>
${p ? '\t' : ''}<span class="line"></span>`;
			if (sdk_type == 'ensemble_api') {
				c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-comment);font-style:italic"># Process all members</span></span>`;
				if (sect.constructor === Array) {
					for (const variable of sect) {
						c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-keyword);font-style:italic">for</span><span style="color:var(--code-preview-foreground)"> variable </span><span style="color:var(--code-preview-token-keyword);font-style:italic">in</span><span style="color:var(--code-preview-foreground)"> ${section}_${variable}</span><span style="color:var(--code-preview-token-punctuation)">:</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">	member </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> variable</span><span style="color:var(--code-preview-token-punctuation)">.</span><span style="color:var(--code-preview-token-function)">EnsembleMember</span><span style="color:var(--code-preview-token-punctuation)">()</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">	${section}_data</span><span style="color:var(--code-preview-token-punctuation)">[</span><span style="color:var(--code-preview-token-keyword)">f</span><span style="color:var(--code-preview-token-string-expression)">"${variable}_member</span><span style="color:var(--code-preview-token-constant)">{</span><span style="color:var(--code-preview-foreground)">member</span><span style="color:var(--code-preview-token-constant)">}</span><span style="color:var(--code-preview-token-string-expression)">"</span><span style="color:var(--code-preview-token-punctuation)">]</span><span style="color:var(--code-preview-token-keyword)"> =</span><span style="color:var(--code-preview-foreground)"> variable</span><span style="color:var(--code-preview-token-punctuation)">.</span><span style="color:var(--code-preview-token-function)">${int64Variables.includes(variable) ? 'ValuesInt64AsNumpy' : 'ValuesAsNumpy'}</span><span style="color:var(--code-preview-token-punctuation)">()</span></span>`;
					}
				} else if (typeof sect === 'string') {
					c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-keyword);font-style:italic">for</span><span style="color:var(--code-preview-foreground)"> variable </span><span style="color:var(--code-preview-token-keyword);font-style:italic">in</span><span style="color:var(--code-preview-foreground)"> ${section}_${sect}</span><span style="color:var(--code-preview-token-punctuation)">:</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">	member </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> variable</span><span style="color:var(--code-preview-token-punctuation)">.</span><span style="color:var(--code-preview-token-function)">EnsembleMember</span><span style="color:var(--code-preview-token-punctuation)">()</span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">	${section}_data</span><span style="color:var(--code-preview-token-punctuation)">[</span><span style="color:var(--code-preview-token-keyword)">f</span><span style="color:var(--code-preview-token-string-expression)">"${sect}_member</span><span style="color:var(--code-preview-token-constant)">{</span><span style="color:var(--code-preview-foreground)">member</span><span style="color:var(--code-preview-token-constant)">}</span><span style="color:var(--code-preview-token-string-expression)">"</span><span style="color:var(--code-preview-token-punctuation)">]</span><span style="color:var(--code-preview-token-keyword)"> =</span><span style="color:var(--code-preview-foreground)"> variable</span><span style="color:var(--code-preview-token-punctuation)">.</span><span style="color:var(--code-preview-token-function)">${int64Variables.includes(sect) ? 'ValuesInt64AsNumpy' : 'ValuesAsNumpy'}</span><span style="color:var(--code-preview-token-punctuation)">()</span></span>`;
				}
			} else {
				if (sect.constructor === Array) {
					for (const variable of sect) {
						c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">${section}_data</span><span style="color:var(--code-preview-token-punctuation-mark)">[</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">${variable}"</span><span style="color:var(--code-preview-token-punctuation-mark)">]</span><span style="color:var(--code-preview-token-keyword)"> =</span><span style="color:var(--code-preview-foreground)"> ${section}_${variable}</span></span>`;
					}
				} else {
					c += `
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">${section}_data</span><span style="color:var(--code-preview-token-punctuation-mark)">[</span><span style="color:var(--code-preview-token-punctuation-mark)">"</span><span style="color:var(--code-preview-token-string-expression)">${sect}"</span><span style="color:var(--code-preview-token-punctuation-mark)">]</span><span style="color:var(--code-preview-token-keyword)"> =</span><span style="color:var(--code-preview-foreground)"> ${section}_${sect}</span></span>`;
				}
			}
			c += `
${p ? '\t' : ''}<span class="line"></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-foreground)">${section}_dataframe </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-foreground)"> pd</span><span style="color:var(--code-preview-token-punctuation-mark)">.</span><span style="color:var(--code-preview-token-function)">DataFrame</span><span style="color:var(--code-preview-token-bracket)">(<span style="color:var(--code-preview-foreground);font-style:italic">data</span> </span><span style="color:var(--code-preview-token-keyword)">=</span><span style="color:var(--code-preview-token-punctuation)"> ${section}_data<span style="color:var(--code-preview-token-bracket)">)</span></span></span>
${p ? '\t' : ''}<span class="line"><span style="color:var(--code-preview-token-function)">print</span><span style="color:var(--code-preview-token-bracket)">("<span style="color:var(--code-preview-token-string-expression)">\\n${capitalizeFirstLetter(section)} data\\n</span>", <span style="color:var(--code-preview-token-function)">${section}_dataframe</span>)</span></span>`;
		}
	}

	c += `
${p ? '\t' : ''}<span class="line"></span></pre>
`;
	return c;
};
